#!/bin/bash -e

TOP_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." &> /dev/null && pwd )"
ARTIFACTS_DIR="${TOP_DIR}/dist/artifacts"
SCRIPTS_DIR="${TOP_DIR}/scripts"
PACKAGE_HARVESTER_OS_DIR="${TOP_DIR}/package/harvester-os"
BUNDLE_DIR="${PACKAGE_HARVESTER_OS_DIR}/iso/bundle"
IMAGES_LISTS_DIR="${BUNDLE_DIR}/harvester/images-lists"
RANCHERD_IMAGES_DIR="${BUNDLE_DIR}/rancherd/images"

mkdir -p ${ARTIFACTS_DIR}

source ${SCRIPTS_DIR}/version
source ${SCRIPTS_DIR}/version-rke2
source ${SCRIPTS_DIR}/version-rancher
source ${SCRIPTS_DIR}/version-harvester ${TOP_DIR}/../harvester
source ${SCRIPTS_DIR}/version-monitoring
source ${SCRIPTS_DIR}/version-logging

BASE_OS_IMAGE="rancher/harvester-os:20230608"
HARVESTER_OS_IMAGE=rancher/harvester-os:$VERSION

cd ${PACKAGE_HARVESTER_OS_DIR}

PRETTY_NAME="Harvester ${VERSION}"

cat > harvester-release.yaml <<EOF
harvester: ${HARVESTER_VERSION}
harvesterChart: ${HARVESTER_CHART_VERSION}
os: ${PRETTY_NAME}
kubernetes: ${RKE2_VERSION}
rancher: ${RANCHER_VERSION}
monitoringChart: ${MONITORING_VERSION}
loggingChart: ${LOGGING_VERSION}
kubevirt: ${HARVESTER_KUBEVIRT_VERSION}
minUpgradableVersion: '${HARVESTER_MIN_UPGRADABLE_VERSION}'
EOF

# Collect dependencies' versions
${SCRIPTS_DIR}/collect-deps.sh harvester-release.yaml

docker build --pull \
	--build-arg BASE_OS_IMAGE="${BASE_OS_IMAGE}" \
	--build-arg HARVESTER_PRETTY_NAME="${PRETTY_NAME}" \
	-t ${HARVESTER_OS_IMAGE} .

PROJECT_PREFIX="harvester"
if [ -n "$VERSION" ];
then
  PROJECT_PREFIX+="-${VERSION}"
else
  PROJECT_PREFIX+="-master"
fi

# Copy kernel, initrd out for PXE boot
KERNEL=$(docker run --rm ${HARVESTER_OS_IMAGE} readlink /boot/vmlinuz)
INITRD=$(docker run --rm ${HARVESTER_OS_IMAGE} readlink /boot/initrd)
docker create --cidfile=os-img-container ${HARVESTER_OS_IMAGE}
docker cp $(<os-img-container):/boot/${KERNEL} ${ARTIFACTS_DIR}/${PROJECT_PREFIX}-vmlinuz-${ARCH}
docker cp $(<os-img-container):/boot/${INITRD} ${ARTIFACTS_DIR}/${PROJECT_PREFIX}-initrd-${ARCH}
chmod +r ${ARTIFACTS_DIR}/${PROJECT_PREFIX}-initrd-${ARCH}
docker rm $(<os-img-container) && rm -f os-img-container

# Make sure files under bundle dir can be read by nginx
find $BUNDLE_DIR -type f -exec chmod +r {} +

# build ISO
ISO_PREFIX="${PROJECT_PREFIX}-${ARCH}"
cp harvester-release.yaml iso
echo "set harvester_version=${VERSION}" > iso/boot/grub2/harvester.cfg

elemental build-iso --config-dir "$(pwd)" "docker:${HARVESTER_OS_IMAGE}" -a x86_64 \
          --local \
          -n "${ISO_PREFIX}" \
          -o "${ARTIFACTS_DIR}" \
          --overlay-iso "$(pwd)/iso" \
          -x "-comp xz"

rm -f ${ARTIFACTS_DIR}/${ISO_PREFIX}.iso.sha256

# Unpack ISO for reconfiguring boot image
# Elemental toolkit deprecated legacy BIOS boot support, and can only use one boot method (UEFI/BIOS) at the same time,
# so we need to unpack the ISO, add legacy BIOS boot support back, and repack it.
# It's a workaround for now, and we will remove legacy BIOS boot support in the future releases.
extract_dir=$(mktemp -d)
xorriso -osirrox on -indev ${ARTIFACTS_DIR}/${ISO_PREFIX}.iso -extract / "${extract_dir}"

# Reset permissions, directories 0755 and files 0644
# otherwise upgrade would fail due to wrong permission on /run/initramfs/live in upgrade repository VM
chmod -R a=r,u+w,a+X "${extract_dir}"

# Copy squashfs image for PXE boot
cp "${extract_dir}/rootfs.squashfs" "${ARTIFACTS_DIR}/${PROJECT_PREFIX}-rootfs-${ARCH}.squashfs"

# Use dd to create empty image, create an empty FAT32 filesystem
# and copy EFI files to it to make it UEFI bootable
uefi_img="${extract_dir}/boot/uefi.img"
dd if=/dev/zero of="${uefi_img}" bs=1k count=4096 status=progress
mkfs.vfat "${uefi_img}"
mcopy -s -i "${uefi_img}" "${extract_dir}/EFI" ::

# Remove original ISO, and repack it using xorriso
rm -f "${ARTIFACTS_DIR}/${ISO_PREFIX}.iso"
xorriso -volid "$(yq '.iso.label' manifest.yaml)" \
    -joliet on -padding 0 \
    -outdev "${ARTIFACTS_DIR}/${ISO_PREFIX}.iso" \
    -map "${extract_dir}" / -chmod 0755 -- \
    -boot_image grub bin_path="boot/x86_64/loader/eltorito.img" \
    -boot_image grub grub2_mbr="${extract_dir}/boot/x86_64/loader/boot_hybrid.img" \
    -boot_image grub grub2_boot_info=on \
    -boot_image any partition_offset=16 \
    -boot_image any cat_path="boot/x86_64/boot.catalog" \
    -boot_image any cat_hidden=on \
    -boot_image any boot_info_table=on \
    -boot_image any platform_id=0x00 \
    -boot_image any emul_type=no_emulation \
    -boot_image any load_size=2048 \
    -append_partition 2 0xef "${extract_dir}/boot/uefi.img" \
    -boot_image any next \
    -boot_image any efi_path=--interval:appended_partition_2:all:: \
    -boot_image any platform_id=0xef \
    -boot_image any emul_type=no_emulation

# Cleanup
rm -rf "${extract_dir}"

# Write checksum
cd ${ARTIFACTS_DIR}
CHECKSUM_FILE=${ISO_PREFIX}.sha512
sha512sum ${PROJECT_PREFIX}* > $CHECKSUM_FILE

ISO_CHECKSUM=$(awk -viso_name="${ISO_PREFIX}.iso" '$2~iso_name{print $1}' $CHECKSUM_FILE)
if [ -z "$ISO_CHECKSUM" ]; then
  echo "Fail to find Harvester ISO file checksum."
  exit 1
fi

# Write version.yaml
if [[ -n "${DRONE_TAG}" ]]; then
	RELEASE_DATE=$(date +'%Y%m%d')
	cat > version.yaml <<EOF
apiVersion: harvesterhci.io/v1beta1
kind: Version
metadata:
  name: ${VERSION}
  namespace: harvester-system
spec:
  isoChecksum: '${ISO_CHECKSUM}'
  isoURL: https://releases.rancher.com/harvester/${VERSION}/${ISO_PREFIX}.iso
  releaseDate: '${RELEASE_DATE}'
EOF
fi

# Collect image lists to a tarball "image-lists.tar.gz"
OUTPUT_DIR="$TOP_DIR/dist/artifacts/image-lists"
mkdir -p $OUTPUT_DIR
find $IMAGES_LISTS_DIR -name "*.txt" -exec cp {} $OUTPUT_DIR \;
find $RANCHERD_IMAGES_DIR -name "*.txt" -exec cp {} $OUTPUT_DIR \;
tar zcvf $TOP_DIR/dist/artifacts/image-lists.tar.gz -C $TOP_DIR/dist/artifacts image-lists && rm -rf $OUTPUT_DIR
