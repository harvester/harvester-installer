#!/bin/bash
set -e

TOP_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." &> /dev/null && pwd )"
SCRIPTS_DIR="${TOP_DIR}/scripts"
PACKAGE_HARVESTER_OS_DIR="${TOP_DIR}/package/harvester-os"
PACKAGE_HARVESTER_REPO_DIR="${TOP_DIR}/package/harvester-repo"

cd ${TOP_DIR}

source ${SCRIPTS_DIR}/version

CHARTS_DIR="${PACKAGE_HARVESTER_REPO_DIR}/charts"
BUNDLE_DIR="${PACKAGE_HARVESTER_OS_DIR}/iso/bundle"
IMAGES_DIR="${BUNDLE_DIR}/harvester/images"
RANCHERD_IMAGES_DIR="${BUNDLE_DIR}/rancherd/images"

mkdir -p ${CHARTS_DIR}
mkdir -p ${IMAGES_DIR}
mkdir -p ${RANCHERD_IMAGES_DIR}

save_image_list()
{
  app=$1
  in_file=$2
  out_file=$3

  case $in_file in
    http*)
      images=$(curl -sfL $in_file)
      ;;
    *)
      images=$(<$in_file)
      ;;
  esac

  for image in $images; do
    repository=${image%:*}
    if yq -e e ".${app}[] | select(. == \"${repository}\")" ${SCRIPTS_DIR}/images/allow.yaml &>/dev/null; then
      echo $image >> $out_file
    fi
  done
}

save_image()
{
  image_list=$1
  save_dir=$2

  archive_name="$(basename ${image_list%.txt}).tar"
  archive_file="${save_dir}/${archive_name}"
  xargs -n1 -t docker image pull --quiet < $image_list
  docker image save -o $archive_file $(<${image_list})
  zstd --rm $archive_file
}

get_url()
{
  from=$1
  save_to=$2

  echo "Download ${from} to ${save_to}..."
  curl -sfL $from -o $save_to
}

# Prepare Harvester chart
harvester_path=../harvester
if [ ! -d ${harvester_path} ];then
    git clone --branch master --single-branch --depth 1 https://github.com/harvester/harvester.git /tmp/harvester
    harvester_path=/tmp/harvester
fi
harvester_chart_path=${harvester_path}/deploy/charts/harvester
helm package ${harvester_chart_path} -d ${CHARTS_DIR}
helm repo index ${CHARTS_DIR}

# Update chart version in Rancherd bootstrap resources
harvester_chart_version=$(yq e .version ${harvester_chart_path}/Chart.yaml --exit-status)
sed -i "s/\$HARVESTER_CHART_VERSION/${harvester_chart_version}/" ${PACKAGE_HARVESTER_OS_DIR}/files/usr/share/rancher/rancherd/config.yaml.d/91-harvester-bootstrap.yaml

if [ -n "$HARVESTER_INSTALLER_OFFLINE_BUILD" -a -e /bundle ]; then
 cp -rf /bundle/* ${BUNDLE_DIR}/
 exit 0
fi

# Offline images

source ${SCRIPTS_DIR}/version-rke2

# Rancherd bootstrap images
# FIXME(kiefer): most images are still under devlopment
cp ${SCRIPTS_DIR}/images/rancherd-bootstrap-images.txt ${RANCHERD_IMAGES_DIR}
RKE2_IMAGE_TAG=${RKE2_VERSION/+/-} # v1.21.3-rc6+rke2r2 -> v1.21.3-rc6-rke2r2
sed -i "s,\$RKE2_VERSION,${RKE2_IMAGE_TAG}," ${RANCHERD_IMAGES_DIR}/rancherd-bootstrap-images.txt
save_image ${RANCHERD_IMAGES_DIR}/rancherd-bootstrap-images.txt ${RANCHERD_IMAGES_DIR}

# Images needed during rancherd cluster-init stage.
cp ${SCRIPTS_DIR}/images/rancherd-images.txt ${IMAGES_DIR}
save_image ${IMAGES_DIR}/rancherd-images.txt ${IMAGES_DIR}

# RKE2 images
RKE2_IMAGES_URL="https://github.com/rancher/rke2/releases/download/${RKE2_VERSION}"
get_url "${RKE2_IMAGES_URL}/rke2-images.linux-amd64.txt" "${IMAGES_DIR}/rke2-images.linux-amd64.txt"
get_url "${RKE2_IMAGES_URL}/rke2-images.linux-amd64.tar.zst" "${IMAGES_DIR}/rke2-images.linux-amd64.tar.zst"

# exclude SR-IOV images
save_image_list "rke2-images-multus" "${RKE2_IMAGES_URL}/rke2-images-multus.linux-amd64.txt" ${IMAGES_DIR}/rke2-images-multus.linux-amd64.txt
save_image ${IMAGES_DIR}/rke2-images-multus.linux-amd64.txt ${IMAGES_DIR}


# Harvester images: get image list from harvester chart's values file
image_list_file='harvester-images.txt'
values_file="${harvester_chart_path}/values.yaml"
touch ${image_list_file}
repositories=( $(yq eval ' explode(.) | .. | select(has("repository")) |select(has("tag")) | .repository' ${values_file}) )
tags=( $(yq eval ' explode(.) | .. | select(has("repository")) |select(has("tag")) | .tag' ${values_file}) )
repositories_length=${#repositories[@]}
tags_length=${#tags[@]}
if [ ${repositories_length} -ne ${tags_length} ];then
  echo "The number of image repositories does not match the number of image tags";
  exit 1
fi
for i in "${!repositories[@]}"; do
  echo "${repositories[$i]}:${tags[$i]}">>${image_list_file}
done
# The following images are not included in chart or Longhorn image list
cat <<EOF >> ${image_list_file}
busybox:1.32.0
alpine:3
kubevirt/virtio-container-disk
rancher/harvester-support-bundle-utils:master-head
EOF

# get longhorn image list
longhorn_version=v$(ls ${harvester_chart_path}/charts | grep longhorn| sed -e "s/^longhorn-//" -e "s/.tgz$//")
longhorn_image_url=https://raw.githubusercontent.com/longhorn/longhorn/${longhorn_version}/deploy/longhorn-images.txt
curl ${longhorn_image_url}>>${image_list_file}

# format image list
awk -F ':' '{if($2==""){print $1":latest"}else{print $0}}' "${image_list_file}" | \
awk -F '/' '{if(NF==3){print $0} else if(NF==2){print "docker.io/"$0}else if(NF=1){print "docker.io/library/"$0}}' >"${image_list_file}.tmp"

# clean image list
sort -u "${image_list_file}.tmp" | \
grep -Ev "local-path-provisioner|library-traefik|klipper-lb|multus" >"${image_list_file}"

cp ${image_list_file} ${IMAGES_DIR}
save_image ${IMAGES_DIR}/${image_list_file} ${IMAGES_DIR}
