#!/bin/bash
set -e

source $(dirname $0)/version

cd $(dirname $0)/..

echo "Start building ISO"

K3S_VERSION=v1.20.4+k3s1
K3S_IMAGE_URL=https://raw.githubusercontent.com/rancher/k3s/${K3S_VERSION}/scripts/airgap/image-list.txt
OFFLINE_BUILD="1"

# Prepare Harvester chart
mkdir -p k3os/images/70-iso/charts
harvester_path=../harvester
if [ ! -d ${harvester_path} ];then
    git clone --branch master --single-branch --depth 1 https://github.com/rancher/harvester.git /tmp/harvester
    harvester_path=/tmp/harvester
fi
harvester_chart_path=${harvester_path}/deploy/charts/harvester
helm package ${harvester_chart_path} -d k3os/images/70-iso/charts

# Offline docker images
# get image list from harvester chart's values file
image_list_file='image-list.txt'
values_file="${harvester_chart_path}/values.yaml"
touch ${image_list_file}
repositories=( $(yq eval ' explode(.) | .. | select(has("repository")) |select(has("tag")) | .repository' ${values_file}) )
tags=( $(yq eval ' explode(.) | .. | select(has("repository")) |select(has("tag")) | .tag' ${values_file}) )
repositories_length=${#repositories[@]}
tags_length=${#tags[@]}
if [ ${repositories_length} -ne ${tags_length} ];then
  echo "The number of image repositories does not match the number of image tags";
  exit 1
fi
for i in "${!repositories[@]}"; do
  echo "${repositories[$i]}:${tags[$i]}">>${image_list_file}
done
# The following images are not included in chart or k3s/longhorn image list
cat <<EOF >> ${image_list_file}
busybox:1.32.0
rancher/system-upgrade-controller:v0.6.2
alpine:3
kubevirt/virtio-container-disk
EOF

# get longhorn image list
longhorn_version=v$(ls ${harvester_chart_path}/charts | grep longhorn| sed -e "s/^longhorn-//" -e "s/.tgz$//")
longhorn_image_url=https://raw.githubusercontent.com/longhorn/longhorn/${longhorn_version}/deploy/longhorn-images.txt
curl ${longhorn_image_url}>>${image_list_file}

# get k3s image list
curl ${K3S_IMAGE_URL}>>${image_list_file}

# format image list
awk -F ':' '{if($2==""){print $1":latest"}else{print $0}}' ${image_list_file} >"${image_list_file}.tmp"
awk -F '/' '{if(NF==3){print $0} else if(NF==2){print "docker.io/"$0}else if(NF=1){print "docker.io/library/"$0}}' "${image_list_file}.tmp" > ${image_list_file}

output_image_tar_file="k3os/images/70-iso/harvester-images.tar"
if [ -n "${OFFLINE_BUILD}" ] && [ ! -f $output_image_tar_file.zst ]; then
  images=$(cat "${image_list_file}")
  echo "${images}" | while read -r image
  do
    echo "=> pulling ${image}"
    ctr images pull "${image}" > /dev/null 2>&1
  done
  echo "${images}" | xargs -r ctr images export ${output_image_tar_file}
  zstd --rm ${output_image_tar_file} -o ${output_image_tar_file}.zst
fi

# get harvester version
pushd ${harvester_path}
source scripts/version
export HARVESTER_VERSION=$VERSION
popd

# Remaster k3os
cd k3os
# Update vendors
export GO111MODULE=on
go mod edit -replace=github.com/nsf/termbox-go=github.com/gitlawr/termbox-go@v0.0.0-20201103025537-250e644d56a6
go mod edit -replace=github.com/rancher/harvester-installer=../
go get
go mod vendor
# make ISO
cd scripts
./default
mkdir -p ../../dist/artifacts
mv ../dist/artifacts/* ../../dist/artifacts
for file in `find ../../dist/artifacts -type f -name '*.iso'`; do mv "$file" "${file/k3os/harvester}"; done
for file in `find ../../dist/artifacts -type f -name 'k3os-vmlinuz-*'`; do mv "$file" "${file/k3os/harvester}"; done
for file in `find ../../dist/artifacts -type f -name 'k3os-initrd-*'`; do mv "$file" "${file/k3os/harvester}"; done
