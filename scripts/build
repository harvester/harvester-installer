#!/bin/bash
set -e

TOP_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." &> /dev/null && pwd )"
SCRIPTS_DIR="${TOP_DIR}/scripts"
PACKAGE_HARVESTER_OS_DIR="${TOP_DIR}/package/harvester-os"

cd ${TOP_DIR}

# Pull harvester source and determine harvester version
harvester_path=../harvester
if [ ! -d ${harvester_path} ];then
    echo "No existed harvester source. Pulling..."
    git clone --branch master --single-branch --depth 1 https://github.com/harvester/harvester.git ../harvester
else
    # When building against locally modified harvester source with
    # "-v /path/to/local/harvester/repo:/go/src/github.com/harvester/harvester"
    # added to DAPPER_RUNARGS, invocations of `git` run from `scripts/version`
    # inside that path will fail with the error:
    #   fatal: detected dubious ownership in repository at
    #   '/go/src/github.com/harvester/harvester'
    # This in turn breaks the harvester version detection.  HARVESTER_VERSION
    # will be set to an empty string, and HARVESTER_CHART_VERSION will be set
    # to "0.0.0--" which later messes up the harvester charts when
    # `scripts/patch-harvester` is run.  Things do not end well after that.
    # Happily, we can fix it with this git config option:
    git config --global --add safe.directory /go/src/github.com/harvester/harvester
fi

addons_path=../addons
if [ ! -d ${addons_path} ];then
    echo "No existed addons source. Pulling..."
    git clone --branch main --single-branch --depth 1 https://github.com/harvester/addons.git ../addons
fi

source ${SCRIPTS_DIR}/version-harvester $harvester_path
source ${SCRIPTS_DIR}/version-rke2
source ${SCRIPTS_DIR}/version
source ${SCRIPTS_DIR}/version-monitoring
source ${SCRIPTS_DIR}/version-rancher
source ${SCRIPTS_DIR}/version-logging

echo "Installer version: ${VERSION}"
echo "Harvester version: ${HARVESTER_VERSION}"
echo "Harvester chart version: ${HARVESTER_CHART_VERSION}"
echo "Rancher version: ${RANCHER_VERSION}"
echo "Rancher monitoring version: ${MONITORING_VERSION}"
echo "Rancher logging version: ${LOGGING_VERSION}"
echo "The ARCH is: ${ARCH}"

mkdir -p bin

LINKFLAGS="-X github.com/harvester/harvester-installer/pkg/config.RKE2Version=$RKE2_VERSION
           -X github.com/harvester/harvester-installer/pkg/config.RancherVersion=$RANCHER_VERSION
           -X github.com/harvester/harvester-installer/pkg/version.Version=$VERSION
           -X github.com/harvester/harvester-installer/pkg/version.HarvesterVersion=$HARVESTER_VERSION
           -X github.com/harvester/harvester-installer/pkg/config.HarvesterChartVersion=$HARVESTER_CHART_VERSION
           -X github.com/harvester/harvester-installer/pkg/config.MonitoringChartVersion=$MONITORING_VERSION
           -X github.com/harvester/harvester-installer/pkg/config.LoggingChartVersion=$LOGGING_VERSION
           $LINKFLAGS"

if [ "$(uname)" = "Linux" ]; then
    if [ -n "${REMOTE_DEBUG}" ]; then
        OTHER_COMPILERFLAGS="all=-N -l"
        OTHER_LINKFLAGS="-extldflags -static"
    else
        OTHER_LINKFLAGS="-extldflags -static -s"
    fi
fi

# render template files
cp ${addons_path}/pkg/templates/*.yaml ./pkg/config/templates

CGO_ENABLED=0 go build -gcflags "${OTHER_COMPILERFLAGS}" -ldflags "$LINKFLAGS $OTHER_LINKFLAGS" -o bin/harvester-installer .

# Copy to harvester package folder
mkdir -p ${PACKAGE_HARVESTER_OS_DIR}/files/usr/bin
install bin/harvester-installer ${PACKAGE_HARVESTER_OS_DIR}/files/usr/bin/
