#!/bin/bash -e

ISOMNT=/run/initramfs/live
TARGET=/run/cos/target

umount_target() {
    sync
    umount ${TARGET}/oem
    umount ${TARGET}/usr/local
    umount ${TARGET}/boot/efi || true
    umount ${TARGET}
    if [ -n "$LOOP" ]; then
        losetup -d $LOOP
    fi
}

cleanup2()
{
    sync
    umount_target || true
    umount ${STATEDIR}
    [ -n "COS_INSTALL_ISO_URL" ] && umount ${ISOMNT} || true
}

cleanup()
{
    EXIT=$?
    cleanup2 2>/dev/null || true
    return $EXIT
}

get_url()
{
    FROM=$1
    TO=$2
    case $FROM in
        ftp*|http*|tftp*)
            n=0
            attempts=5
            until [ "$n" -ge "$attempts" ]
            do
                curl -o $TO -fL ${FROM} && break
                n=$((n+1))
                echo "Failed to download, retry attempt ${n} out of ${attempts}"
                sleep 2
            done
            ;;
        *)
            cp -f $FROM $TO
            ;;
    esac
}

get_iso()
{
    if [ -n "$COS_INSTALL_ISO_URL" ]; then
        ISOMNT=$(mktemp -d -p /tmp cos.XXXXXXXX.isomnt)
        TEMP_FILE=$(mktemp -p /tmp cos.XXXXXXXX.iso)
        get_url ${COS_INSTALL_ISO_URL} ${TEMP_FILE}
        ISO_DEVICE=$(losetup --show -f $TEMP_FILE)
        mount -o ro ${ISO_DEVICE} ${ISOMNT}
    fi
}

do_detect()
{
    echo "Detecting drives.."

    OEM=$(blkid -L COS_OEM || true)
    STATE=$(blkid -L COS_STATE || true)
    PERSISTENT=$(blkid -L COS_PERSISTENT || true)
}

do_mount()
{
    echo "Mounting critical endpoints.."

    mkdir -p ${TARGET}

    STATEDIR=/tmp/mnt/STATE
    mkdir -p $STATEDIR || true
    mount ${STATE} $STATEDIR

    LOOP=$(losetup --show -f ${STATEDIR}/cOS/active.img)
    mount -t ext2 $LOOP $TARGET

    mkdir -p ${TARGET}/oem
    mount ${OEM} ${TARGET}/oem
    mkdir -p ${TARGET}/usr/local
    mount ${PERSISTENT} ${TARGET}/usr/local
}


preload_rke2_images()
{
    preload=$(ls ${ISOMNT}/bundle/harvester/images/*.tar.zst 2>/dev/null || true)
    if [ -z "$preload" ]; then
        return
    fi

    RKE2_IMAGES_DIR="/var/lib/rancher/rke2/agent/images"
    mkdir -p $TARGET/$RKE2_IMAGES_DIR
    mount --bind ${ISOMNT}/bundle/harvester/images $TARGET/$RKE2_IMAGES_DIR

    cd $TARGET
    mount --bind /dev dev
    mount --bind /proc proc

    echo "Loading images. This may take a few minutes..."
    chroot . /bin/bash <<"EOF"
      set -e
      # update the nameserver
      netconfig update

      inst_tmp=$(mktemp -d -p /usr/local)
      trap "rm -rf $inst_tmp" exit

      # extract rke2 tarball from image
      rke2_image=$(grep 'docker.io/rancher/system-agent-installer-rke2:' /var/lib/rancher/agent/images/rancherd-bootstrap-images.txt)
      wharfie --images-dir /var/lib/rancher/agent/images/ $rke2_image $inst_tmp

      # extract rke2 binary
      rke2_tmp="$inst_tmp/rke2"
      mkdir -p $rke2_tmp && tar xf $inst_tmp/rke2.linux-amd64.tar.gz -C $rke2_tmp

      $rke2_tmp/bin/rke2 server &> /rke2.log &

      export PATH=/var/lib/rancher/rke2/bin:$PATH
      export CONTAINERD_ADDRESS=/run/k3s/containerd/containerd.sock

      # wait for containerd to be ready
      until ctr --connect-timeout 1s version&>/dev/null
      do
        sleep 1
      done

      # make sure all preloading images are ready
      for i in /var/lib/rancher/rke2/agent/images/*.txt; do
        stdbuf -oL ctr-check-images.sh $i
      done

      # stop containerd
      pkill rke2
      rm /rke2.log

      rm -rf /var/lib/rancher/rke2/server
      rm -rf /var/lib/rancher/rke2/agent/pod-manifests/*
EOF

    until umount dev&>/dev/null
    do
      sleep 1
    done
    umount proc
    cd - &> /dev/null
    umount ${TARGET}/${RKE2_IMAGES_DIR}
}

preload_rke2_manifests_and_static()
{
    RKE2_SERVER_DIR="/var/lib/rancher/rke2/server"
    mkdir -p $TARGET/$RKE2_SERVER_DIR
    cp -r ${ISOMNT}/bundle/harvester/manifests $TARGET/$RKE2_SERVER_DIR || true
    cp -r ${ISOMNT}/bundle/harvester/static $TARGET/$RKE2_SERVER_DIR || true
}

preload_rancherd_images()
{
    preload=$(ls ${ISOMNT}/bundle/rancherd/images/*.tar.zst 2>/dev/null || true)
    if [ -z "$preload" ]; then
        return
    fi

    mkdir -p $TARGET/var/lib/rancher/agent/images
    cp ${ISOMNT}/bundle/rancherd/images/* $TARGET/var/lib/rancher/agent/images
}

do_preload()
{
    # Bind mount persistent folder to preload images
    BIND_MOUNTS=("var/lib/rancher")

    for i in ${BIND_MOUNTS[@]}; do
        state_dir="/usr/local/.state/${i//\//-}.bind"
        mkdir -p $TARGET/$i
        mkdir -p $TARGET/$state_dir
        mount -o bind $TARGET/$state_dir $TARGET/$i
    done

    preload_rancherd_images
    preload_rke2_images
    preload_rke2_manifests_and_static

    for i in ${BIND_MOUNTS[@]}; do
        umount $TARGET/$i
    done
}

get_crashkernel_params()
{
    local low=$(kdumptool calibrate | sed -n 's/^Low:\s\(.*\)/\1/p')
    local high=$(kdumptool calibrate | sed -n 's/^High:\s\(.*\)/\1/p')

    if [ -z "$low" ] || [ -z "$high" ]; then
      return
    fi

    # https://doc.opensuse.org/documentation/leap/tuning/html/book-tuning/cha-tuning-kexec.html#sec-tuning-kexec-crashkernel
    # Let's assume maximum 100 luns for now.
    local size_low=$low
    local size_high
    let size_high=($high + 100/2)

    echo "crashkernel=${size_high}M,high crashkernel=${size_low}M,low"
}

update_grub_settings()
{
    if [ -z "${COS_INSTALL_TTY}" ]; then
        TTY=$(tty | sed 's!/dev/!!')
    else
        TTY=$COS_INSTALL_TTY
    fi

    if [ -e "/dev/${TTY%,*}" ] && [ "$TTY" != tty1 ] && [ "$TTY" != console ] && [ -n "$TTY" ]; then
        sed -i "s/console_params=\"console=tty1\"/console_params=\"console=${TTY} console=tty1\"/g" ${TARGET}/etc/cos/bootargs.cfg
    fi

    # calculate recommended crashkernel allocation size
    CRASH_KERNEL_PARAMS=$(get_crashkernel_params || true)
    if [ -n "$CRASH_KERNEL_PARAMS" ]; then
        sed -i "s/^set crash_kernel_params=.*/crash_kernel_params=\"${CRASH_KERNEL_PARAMS}\"/" ${TARGET}/etc/cos/bootargs.cfg
    fi
}

save_config()
{
    if [ -e "$HARVESTER_CONFIG" ]; then
        cp $HARVESTER_CONFIG ${TARGET}/oem/harvester.config
    fi 
}

trap cleanup exit

# For PXE Boot
get_iso

# Run cOS installer but do not let it fetch ISO and shutdown
COS_INSTALL_ISO_URL="" INTERACTIVE=yes cos-installer

# Preload images
do_detect
do_mount
save_config
do_preload

update_grub_settings
