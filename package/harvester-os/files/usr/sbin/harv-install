#!/bin/bash -e

ISOTEMP=""
ISOMNT=/run/initramfs/live
TARGET=/run/cos/target
DATA_DISK_FSLABEL="HARV_LH_DEFAULT"

# Update environment variables
export ELEMENTAL_TARGET=$ELEMENTAL_DEVICE
export ELEMENTAL_ISO=$ELEMENTAL_ISO_URL
export ELEMENTAL_CLOUD_INIT=$ELEMENTAL_CONFIG_URL
export QUIET=${ELEMENTAL_SILENT:+"--quiet"}
export DEBUG=${ELEMENTAL_DEBUG:+"--debug"}

clear_disk_label()
{
    # Clear the label of partitions that has $DATA_DISK_FSLABEL to prevent misidentification
    # Also, while yip is partitioning the disk, if it sees the LABEL to be used exists,
    # it won't create the partition. So it's necessary to clear the label
    for part in $(blkid -t LABEL="$DATA_DISK_FSLABEL" -o device); do
        echo "Remove filesystem label from $part"
        # Run this tune2fs twice because sometimes the first run would show "Recovering journal"
        # and label is not modified
        tune2fs -L "" $part > /dev/null
        tune2fs -L "" $part > /dev/null
    done
    udevadm settle
}

umount_target() {
    sync
    umount ${TARGET}/oem
    umount ${TARGET}/usr/local
    umount ${TARGET}/boot/efi || true
    umount ${TARGET}
    if [ -n "$LOOP" ]; then
        losetup -d $LOOP
    fi
}

cleanup2()
{
    sync
    [ -n "$ELEMENTAL_ISO" ] && umount "$ISOMNT" || true
    [ -n "$ISOTEMP" ] && rm -f "$ISOTEMP"
    umount_target || true
    umount ${STATEDIR}
}

cleanup()
{
    EXIT=$?
    cleanup2 2>/dev/null || true
    return $EXIT
}

check_url()
{
    local url=$1
    case $url in
        tftp*)
            # There's no way verify whether the URL exists on TFTP server without
            # actually download the file. Always pass the check.
            echo "WARNING: Unable check TFTP URL. Assumed file exists"
            ;;
        ftp*|http*)
            # Don't show anything if file exists, but show error messasge when it's not
            curl -I -fL --progress-bar ${url} > /dev/null
            ;;
        *)
            test -f $url
            ;;
    esac
}

get_url()
{
    FROM=$1
    TO=$2
    case $FROM in
        ftp*|http*|tftp*)
            n=0
            attempts=5
            until [ "$n" -ge "$attempts" ]
            do
                curl -o $TO -fL ${FROM} && break
                n=$((n+1))
                echo "Failed to download, retry attempt ${n} out of ${attempts}"
                sleep 2
            done
            ;;
        *)
            cp -f $FROM $TO
            ;;
    esac
}

check_iso(){
    if [ -n "$ELEMENTAL_ISO" ]; then
        echo "Checking ISO URL.."
        check_url "$ELEMENTAL_ISO"
    fi
}

get_iso()
{
    if [ -n "$ELEMENTAL_ISO" ]; then
        echo "Downloading ISO.."
        ISOMNT=$(mktemp -d -p /tmp cos.XXXXXXXX.isomnt)
        ISOTEMP=$(mktemp -p ${TARGET}/usr/local cos.XXXXXXXX.iso)
        get_url ${ELEMENTAL_ISO} ${ISOTEMP}
        ISO_DEVICE=$(losetup --show -f $ISOTEMP)
        mount -o ro ${ISO_DEVICE} ${ISOMNT}
    fi
}

do_detect()
{
    echo "Detecting drives.."

    OEM=$(blkid -L COS_OEM || true)
    STATE=$(blkid -L COS_STATE || true)
    PERSISTENT=$(blkid -L COS_PERSISTENT || true)
}

do_mount()
{
    echo "Mounting critical endpoints.."

    mkdir -p ${TARGET}

    STATEDIR=/tmp/mnt/STATE
    mkdir -p $STATEDIR || true
    mount ${STATE} $STATEDIR

    LOOP=$(losetup --show -f ${STATEDIR}/cOS/active.img)
    mount -t ext2 $LOOP $TARGET

    mkdir -p ${TARGET}/oem
    mount ${OEM} ${TARGET}/oem
    mkdir -p ${TARGET}/usr/local
    mount ${PERSISTENT} ${TARGET}/usr/local
}


preload_rke2_images()
{
    preload=$(ls ${ISOMNT}/bundle/harvester/images/*.tar.zst 2>/dev/null || true)
    if [ -z "$preload" ]; then
        return
    fi

    RKE2_IMAGES_DIR="/var/lib/rancher/rke2/agent/images"
    RKE2_IMAGES_LISTS_DIR="/tmp/images-lists"
    mkdir -p $TARGET/$RKE2_IMAGES_DIR
    mkdir -p $TARGET/$RKE2_IMAGES_LISTS_DIR
    mount --bind ${ISOMNT}/bundle/harvester/images $TARGET/$RKE2_IMAGES_DIR
    mount --bind ${ISOMNT}/bundle/harvester/images-lists $TARGET/$RKE2_IMAGES_LISTS_DIR

    cd $TARGET
    mount --bind /dev dev
    mount --bind /proc proc

    echo "Loading images. This may take a few minutes..."
    chroot . /bin/bash <<"EOF"
      set -e
      # update the nameserver
      netconfig update

      inst_tmp=$(mktemp -d -p /usr/local)
      trap "rm -rf $inst_tmp" exit

      # extract rke2 tarball from image
      image_list=$(ls /var/lib/rancher/agent/images/rancherd-bootstrap-images-*.txt | head -n 1)
      if [ -z "$image_list" ]; then
        echo "[ERROR] Fail to get rancherd bootstrap images list."
        exit 1
      fi
      rke2_image=$(grep 'docker.io/rancher/system-agent-installer-rke2:' $image_list)
      wharfie --images-dir /var/lib/rancher/agent/images/ $rke2_image $inst_tmp

      # extract rke2 binary
      rke2_tmp="$inst_tmp/rke2"
      mkdir -p $rke2_tmp && tar xf $inst_tmp/rke2.linux-amd64.tar.gz -C $rke2_tmp

      $rke2_tmp/bin/rke2 server &> /rke2.log &

      export PATH=/var/lib/rancher/rke2/bin:$PATH
      export CONTAINERD_ADDRESS=/run/k3s/containerd/containerd.sock

      # wait for containerd to be ready
      until ctr --connect-timeout 1s version&>/dev/null
      do
        sleep 1
      done

      # make sure all preloading images are ready
      for i in /tmp/images-lists/*.txt; do
        stdbuf -oL ctr-check-images.sh $i
      done

      # stop containerd
      pkill rke2
      rm /rke2.log
      rm /etc/rancher/rke2/rke2.yaml

      rm -rf /var/lib/rancher/rke2/server
      rm -rf /var/lib/rancher/rke2/agent/pod-manifests/*
EOF

    until umount dev&>/dev/null
    do
      sleep 1
    done
    umount proc
    cd - &> /dev/null
    umount ${TARGET}/${RKE2_IMAGES_DIR}
    umount ${TARGET}/${RKE2_IMAGES_LISTS_DIR}
}

preload_rancherd_images()
{
    preload=$(ls ${ISOMNT}/bundle/rancherd/images/*.tar.zst 2>/dev/null || true)
    if [ -z "$preload" ]; then
        return
    fi

    mkdir -p $TARGET/var/lib/rancher/agent/images
    cp ${ISOMNT}/bundle/rancherd/images/* $TARGET/var/lib/rancher/agent/images
}

do_preload()
{
    # Bind mount persistent folder to preload images
    BIND_MOUNTS=("var/lib/rancher")

    for i in ${BIND_MOUNTS[@]}; do
        state_dir="/usr/local/.state/${i//\//-}.bind"
        mkdir -p $TARGET/$i
        mkdir -p $TARGET/$state_dir
        mount -o bind $TARGET/$state_dir $TARGET/$i
    done

    preload_rancherd_images
    preload_rke2_images

    for i in ${BIND_MOUNTS[@]}; do
        umount $TARGET/$i
    done
}

get_crashkernel_params()
{
    local low=$(kdumptool calibrate | sed -n 's/^Low:\s\(.*\)/\1/p')
    local high=$(kdumptool calibrate | sed -n 's/^High:\s\(.*\)/\1/p')

    if [ -z "$low" ] || [ -z "$high" ]; then
      return
    fi

    # https://doc.opensuse.org/documentation/leap/tuning/html/book-tuning/cha-tuning-kexec.html#sec-tuning-kexec-crashkernel
    # Let's assume maximum 100 luns for now.
    local size_low=$low
    local size_high
    let size_high=($high + 100/2)

    echo "crashkernel=${size_high}M,high crashkernel=${size_low}M,low"
}

add_debug_grub_entry()
{
    cat > "${STATEDIR}/grubmenu" << "EOF"
menuentry "${display_name} (debug)" --id debug {
  search --no-floppy --set=root --label COS_STATE
  set img=/cOS/active.img
  set label=COS_ACTIVE
  loopback loop0 /$img
  set root=($root)
  source (loop0)/etc/cos/bootargs.cfg
  linux (loop0)$kernel $kernelcmd ${extra_cmdline} ${extra_passive_cmdline} ${crash_kernel_params}
  initrd (loop0)$initramfs
}
EOF
}

update_grub_settings()
{
    if [ -z "${ELEMENTAL_TTY}" ]; then
        TTY=$(tty | sed 's!/dev/!!')
    else
        TTY=$ELEMENTAL_TTY
    fi

    if [ -e "/dev/${TTY%,*}" ] && [ "$TTY" != tty1 ] && [ "$TTY" != console ] && [ -n "$TTY" ]; then
        sed -i "s/console_params=\"console=tty1\"/console_params=\"console=${TTY} console=tty1\"/g" ${TARGET}/etc/cos/bootargs.cfg
    fi

    # calculate recommended crashkernel allocation size
    CRASH_KERNEL_PARAMS=$(get_crashkernel_params || true)
    if [ -n "$CRASH_KERNEL_PARAMS" ]; then
        sed -i "s/^set crash_kernel_params=.*/crash_kernel_params=\"${CRASH_KERNEL_PARAMS}\"/" ${TARGET}/etc/cos/bootargs.cfg
    fi

    # PATCH: Adding '--no-floppy' option to search command
    GRUB_CFG="${STATEDIR}/grub2/grub.cfg"
    sed -i "s/search /search --no-floppy /" "$GRUB_CFG"
    sed -i "s/search.fs_label /search --no-floppy --label /" "$GRUB_CFG"
    sed -i "s/search.file /search --no-floppy --file /" "$GRUB_CFG"
    sed -i "s/search.fs_uuid /search --no-floppy --fs-uuid /" "$GRUB_CFG"
    sed -i -E 's/^(\s*search\b)(.*)root$/\1 --set=root\2/' "$GRUB_CFG"

    add_debug_grub_entry
}

save_configs()
{
    save_dir=${TARGET}/oem

    # When saving files to /oem, do not use yaml as the extension name because cos-setup will load them.
    if [ -e "$HARVESTER_CONFIG" ]; then
        # harvester.config has to be stored in /oem/, it will be use by the harv-update-rke2-server-url script
        cp $HARVESTER_CONFIG $save_dir/harvester.config
    fi

    if [ -e "$ELEMENTAL_PARTITION_LAYOUT" ]; then
        cp $ELEMENTAL_PARTITION_LAYOUT $save_dir/part-layout.config
    fi
}

save_installation_log()
{
    save_dir=${TARGET}/oem/install
    mkdir -p $save_dir

    if [ -e "$HARVESTER_INSTALLATION_LOG" ]; then
        fsync $HARVESTER_INSTALLATION_LOG
        cp $HARVESTER_INSTALLATION_LOG $save_dir
    fi
}

save_wicked_state()
{
    # Save wicked state so we could keep the DHCP IP
    local wicked_state="${TARGET}/usr/local/.state/var-lib-wicked.bind"
    mkdir -p ${wicked_state}
    cp -r /var/lib/wicked/. ${wicked_state}
}

do_data_disk_format()
{
    if [ -z $HARVESTER_DATA_DISK ]; then
        return
    fi

    # Resolve link
    local data_disk_device=$HARVESTER_DATA_DISK
    if [ -L "$HARVESTER_DATA_DISK" ]; then
      data_disk_device=$(readlink -f "$HARVESTER_DATA_DISK")
    fi

    # Create one EXT4 partition
    echo "Formatting $HARVESTER_DATA_DISK as data disk..."
    mkfs.ext4 -F -L "$DATA_DISK_FSLABEL" "$HARVESTER_DATA_DISK"
}

trap cleanup exit

check_iso

# Follow the symbolic link to the real device
install_device="$ELEMENTAL_TARGET"
if [ -L "$ELEMENTAL_TARGET" ]; then
  install_device=$(readlink -f "$ELEMENTAL_TARGET")
fi

# Tear down LVM and MD devices on the system, if the installing device is occuipied, the
# partitioning operation could fail later. Be forgiven here.
blkdeactivate --lvmoptions wholevg,retry --dmoptions force,retry --errors || true

clear_disk_label

# Run elemental installer but do not let it fetch ISO and do not shutdown
ELEMENTAL_ISO="" ELEMENTAL_TARGET="$install_device" ELEMENTAL_POWEROFF="" elemental ${QUIET} ${DEBUG} install

# Format the data disk if needed
do_data_disk_format

# Preload images
do_detect
do_mount
get_iso  # For PXE Boot
save_configs
save_wicked_state
do_preload

update_grub_settings

# This needs to be the at the last because the log file captures the output of this script
save_installation_log
