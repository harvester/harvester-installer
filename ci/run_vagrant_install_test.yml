---
- name: Run Vagrant Harvester Installation Test
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    REPO: "{{ harvester_installer_repo_name | default('harvester/harvester-installer') }}"

  tasks:
    - name: Make sure WORKSPACE is defined
      fail:
        msg: "Variable WORKSPACE is not defined."
      when: WORKSPACE is not defined

    - name: Check for harvester-installer
      stat:
        path: "{{ WORKSPACE }}/harvester-installer"
      register: harvester_installer_dir_check_result

    - name: Make sure harvester-installer directory exist
      fail:
        msg: "{{ WORKSPACE }}/harvester-installer not found"
      when: not harvester_installer_dir_check_result.stat.exists

    - name: Build harvester-installer artifacts
      shell: >
        make
      args:
        chdir: "{{ WORKSPACE }}/harvester-installer"
      retries: 5
      delay: 20
      register: shell_result
      until: shell_result.rc == 0

    - name: Check for existing environment
      stat:
        path: "{{ WORKSPACE }}/ipxe-examples"
      register: check_ipxe_examples_result

    - name: Cleanup vagrants
      shell: >
        vagrant destroy -f --parallel
      args:
        chdir: "{{ WORKSPACE }}/ipxe-examples/vagrant-pxe-harvester"
      when: check_ipxe_examples_result.stat.exists

    - name: Cleanup ipxe-examples dir
      file:
        path: "{{ WORKSPACE }}/ipxe-examples"
        state: absent

    - name: Clone ipxe-examples repo
      git:
        repo: https://github.com/harvester/ipxe-examples.git
        version: main
        dest: "{{ WORKSPACE }}/ipxe-examples"

    - name: Check to see if "/usr/share/qemu/OVMF.fd" exist
      stat:
        path: /usr/share/qemu/OVMF.fd
      register: file_ovmf_fd_check_result

    - name: Remove OVMF.fd line if needed
      lineinfile:
        path: "{{ WORKSPACE }}/ipxe-examples/vagrant-pxe-harvester/Vagrantfile"
        regexp: '.*\/OVMF\.fd.*'
        state: absent
      when: not file_ovmf_fd_check_result.stat.exists

    - name: Generate the SSH key
      vars:
        ssh_key_filename: "{{ WORKSPACE }}/harvester-installer/ci/terraform/tmp-ssh-key"
      openssh_keypair:
         path: "{{ ssh_key_filename }}"
         type: rsa
         size: 3072
         state: present
         force: no

    - name: Set SSH Key
      vars:
        generated_ssh_key: "{{ lookup('file', '{{ WORKSPACE }}/harvester-installer/ci/terraform/tmp-ssh-key.pub') }}"
        settings_file: "{{ WORKSPACE }}/ipxe-examples/vagrant-pxe-harvester/settings.yml"
      shell: yq e -i ".harvester_config.ssh_authorized_keys += [\"{{ generated_ssh_key }}\"]" "{{ settings_file }}"

    - name: Set harvester_iso_url
      replace:
        path: "{{ WORKSPACE }}/ipxe-examples/vagrant-pxe-harvester/settings.yml"
        regexp: "^harvester_iso_url:.*"
        replace: "harvester_iso_url: file://{{ WORKSPACE }}/harvester-installer/dist/artifacts/harvester-master-amd64.iso"

    - name: Set harvester_kernel_url
      replace:
        path: "{{ WORKSPACE }}/ipxe-examples/vagrant-pxe-harvester/settings.yml"
        regexp: "^harvester_kernel_url:.*"
        replace: "harvester_kernel_url: file://{{ WORKSPACE }}/harvester-installer/dist/artifacts/harvester-master-vmlinuz-amd64"

    - name: Set harvester_ramdisk_url
      replace:
        path: "{{ WORKSPACE }}/ipxe-examples/vagrant-pxe-harvester/settings.yml"
        regexp: "^harvester_ramdisk_url:.*"
        replace: "harvester_ramdisk_url: file://{{ WORKSPACE }}/harvester-installer/dist/artifacts/harvester-master-initrd-amd64"

    - name: Set harvester_rootfs_url
      replace:
        path: "{{ WORKSPACE }}/ipxe-examples/vagrant-pxe-harvester/settings.yml"
        regexp: "^harvester_rootfs_url:.*"
        replace: "harvester_rootfs_url: file://{{ WORKSPACE }}/harvester-installer/dist/artifacts/harvester-master-rootfs-amd64.squashfs"

    - name: Run setup Harvester
      shell: >
        ./setup_harvester.sh
      register: setup_harvester_result
      args:
        chdir: "{{ WORKSPACE }}/ipxe-examples/vagrant-pxe-harvester"
      ignore_errors: yes

    - name: Print Harvester installation output
      debug:
        msg: "{{ setup_harvester_result.stdout_lines }}"

    - name: Clear the previous temp file
      shell: >
        ./cleanup_test_files.sh
      args:
        chdir: "{{ WORKSPACE }}/harvester-installer/ci/terraform"

    - name: Testing basic operations with terraform
      register: terraform_test
      vars:
        settings_file: "{{ WORKSPACE }}/ipxe-examples/vagrant-pxe-harvester/settings.yml"
      shell: |
        curl https://releases.hashicorp.com/terraform/1.3.7/terraform_1.3.7_linux_amd64.zip -o terraform_bin.zip
        unzip -o terraform_bin.zip
        ./get_kubeconfig.sh {{ settings_file }}
        ./terraform init -no-color
        ./terraform apply -auto-approve -no-color
      args:
        chdir: "{{ WORKSPACE }}/harvester-installer/ci/terraform"

    - name: Print terraform output
      debug:
        msg: "{{ terraform_test.stdout_lines }}"

    - name: Test network on the VMs
      register: network_test
      vars:
        settings_file: "{{ WORKSPACE }}/ipxe-examples/vagrant-pxe-harvester/settings.yml"
      shell: |
        ./test_terraform_vm.sh {{ settings_file }}
      args:
        chdir: "{{ WORKSPACE }}/harvester-installer/ci/terraform"

    - name: Print network testing output
      debug:
        msg: "{{ network_test.stdout_lines }}"

    - name: Cleanup Harvester Vagrant VMs
      shell: >
        vagrant destroy -f
      args:
        chdir: "{{ WORKSPACE }}/ipxe-examples/vagrant-pxe-harvester"

    - name: Check result
      fail:
        msg: "ERROR: {{ setup_harvester_result.stderr }}"
      when: setup_harvester_result.failed
